Terminal -1

docker compose up


Trino Web UI: http://localhost:8080
MinIO UI: http://localhost:9001 (admin/password)
MinIO API: http://localhost:9000
Polaris: http://localhost:8181

Terminal -2

# Create an Iceberg catalog
	[
	# access token

	ACCESS_TOKEN=$(curl -X POST \
	  http://localhost:8181/api/catalog/v1/oauth/tokens \
	  -d 'grant_type=client_credentials&client_id=root&client_secret=secret&scope=PRINCIPAL_ROLE:ALL' \
	  | jq -r '.access_token')
	
	curl -i -X POST \
	  -H "Authorization: Bearer $ACCESS_TOKEN" \
	  http://localhost:8181/api/management/v1/catalogs \
	  --json '{
	    "name": "polariscatalog",
	    "type": "INTERNAL",
	    "properties": {
	      "default-base-location": "s3://warehouse",
	      "s3.endpoint": "http://minio:9000",
	      "s3.path-style-access": "true",
	      "s3.access-key-id": "admin",
	      "s3.secret-access-key": "password",
	      "s3.region": "dummy-region"
	    },
	    "storageConfigInfo": {
	      "roleArn": "arn:aws:iam::000000000000:role/minio-polaris-role",
	      "storageType": "S3",
	      "allowedLocations": [
	        "s3://warehouse/*"
	      ]
	    }
  	}'
  	]
  	
# check

curl -X GET http://localhost:8181/api/management/v1/catalogs \
  -H "Authorization: Bearer $ACCESS_TOKEN" | jq	  	
  
# expected output

	{
	  "catalogs": [
	    {
	      "type": "INTERNAL",
	      "name": "polariscatalog",
	      "properties": {
		"s3.path-style-access": "true",
		"s3.access-key-id": "admin",
		"s3.secret-access-key": "password",
		"default-base-location": "s3://warehouse",
		"s3.region": "dummy-region",
		"s3.endpoint": "http://minio:9000"
	      },
	      "createTimestamp": 1750257800389,
	      "lastUpdateTimestamp": 1750257800389,
	      "entityVersion": 1,
	      "storageConfigInfo": {
		"roleArn": "arn:aws:iam::000000000000:role/minio-polaris-role",
		"externalId": null,
		"userArn": null,
		"region": null,
		"storageType": "S3",
		"allowedLocations": [
		  "s3://warehouse/*",
		  "s3://warehouse"
		]
	      }
	    }
	  ]


# setup Permissions

# Create a catalog admin role
curl -X PUT http://localhost:8181/api/management/v1/catalogs/polariscatalog/catalog-roles/catalog_admin/grants \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  --json '{"grant":{"type":"catalog", "privilege":"CATALOG_MANAGE_CONTENT"}}'

# Create a data engineer role
curl -X POST http://localhost:8181/api/management/v1/principal-roles \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  --json '{"principalRole":{"name":"data_engineer"}}'

# Connect the roles
curl -X PUT http://localhost:8181/api/management/v1/principal-roles/data_engineer/catalog-roles/polariscatalog \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  --json '{"catalogRole":{"name":"catalog_admin"}}'

# Give root the data engineer role
curl -X PUT http://localhost:8181/api/management/v1/principals/root/principal-roles \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  --json '{"principalRole": {"name":"data_engineer"}}'
  
  
  
# Check that the role was correctly assigned to the root principal:

curl -X GET http://localhost:8181/api/management/v1/principals/root/principal-roles -H "Authorization: Bearer $ACCESS_TOKEN" | jq

# expected output

{
  "roles": [
    {
      "name": "service_admin",
      "federated": false,
      "properties": {},
      "createTimestamp": 1751733238263,
      "lastUpdateTimestamp": 1751733238263,
      "entityVersion": 1
    },
    {
      "name": "data_engineer",
      "federated": false,
      "properties": {},
      "createTimestamp": 1751733315678,
      "lastUpdateTimestamp": 1751733315678,
      "entityVersion": 1
    }
  ]
}


------------------

# launch Trino

docker compose exec -it trino trino --server localhost:8080 --catalog iceberg


# Tests exercise

-- Create a schema first (a namespace in Polaris).
CREATE SCHEMA db;

-- Activate the schema
USE db;

CREATE TABLE customers (
  customer_id BIGINT,
  first_name VARCHAR,
  last_name VARCHAR,
  email VARCHAR
);

INSERT INTO customers (customer_id, first_name, last_name, email) 
VALUES (1, 'Rey', 'Skywalker', 'rey@rebelscum.org'),
       (2, 'Hermione', 'Granger', 'hermione@hogwarts.edu'),
       (3, 'Tony', 'Stark', 'tony@starkindustries.com');
       
       
SELECT * FROM customers;

# snapshot
-- Check out your table's history
SELECT snapshot_id, committed_at, summary
FROM "customers$snapshots"
ORDER BY committed_at DESC;


UPDATE customers
SET last_name = 'Granger-Weasley'
WHERE customer_id = 2;

# verify

SELECT * FROM customers;

SELECT snapshot_id, committed_at, summary
FROM "customers$snapshots"
ORDER BY committed_at DESC;


SELECT * FROM customers FOR TIMESTAMP AS OF TIMESTAMP '2025-07-05 17:20:00.000 UTC';
# previous state


# minio console

http://localhost:9001

# using duckdb to access iceberg

docker run -it --network=local-iceberg-lakehouse datacatering/duckdb:v1.3.0

# in duckdb cli

INSTALL iceberg;
        
LOAD iceberg;
  
CREATE SECRET iceberg_secret (
    TYPE ICEBERG,
    CLIENT_ID 'root',
    CLIENT_SECRET 'secret',
    OAUTH2_SERVER_URI 'http://polaris:8181/api/catalog/v1/oauth/tokens',
    OAUTH2_SCOPE 'PRINCIPAL_ROLE:ALL',
    OAUTH2_GRANT_TYPE 'client_credentials'
);
       
ATTACH 'polariscatalog' AS iceberg_catalog (
   TYPE iceberg,
   SECRET iceberg_secret,
   ENDPOINT 'http://polaris:8181/api/catalog'
);
       
USE iceberg_catalog.db;
    
SET s3_endpoint='minio:9000';
SET s3_use_ssl='false';
SET s3_access_key_id='admin' ;
SET s3_secret_access_key='password';
SET s3_region='dummy-region';
SET s3_url_style='path';



SELECT * FROM customers;
